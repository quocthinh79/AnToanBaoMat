package model;

import java.text.ParsePosition;
import java.util.Iterator;
import java.util.concurrent.ThreadLocalRandom;

public class HillEncoding {
	public static String createKeyRandom() {
		String result = "";
		for (int i = 0; i < 4; i++) {
			int numRandom = ThreadLocalRandom.current().nextInt(1, 30);
			if (i == 4 / 2) {
				result += "| " + numRandom + " ";
			} else {
				result += numRandom + " ";
			}
		}
		return result;
	}

	public static String encrypt(String input, String key) {
		String result = "";
		char[] array = input.toCharArray();
		char[] inputToArray;
		if (array.length % 2 != 0) {
			inputToArray = new char[array.length + 1];
			for (int i = 0; i < inputToArray.length; i++) {
				if (i < inputToArray.length - 1) {
					inputToArray[i] = array[i];
				} else {
					inputToArray[i] = '*';
				}
			}
		} else {
			inputToArray = new char[array.length];
			inputToArray = array;
		}
		for (int i = 0; i < inputToArray.length; i++) {
			if (i != 0) {
				if (i % 2 == 0) {
					String keyString = key.split(" \\| ")[0];
					int keyNum1 = Integer.parseInt(keyString.split(" ")[0]);
					int keyNum2 = Integer.parseInt((keyString.split(" ")[1]));
					if (i == (inputToArray.length - 1)) {
						char text = inputToArray[i];
						int posText = Model.TEST.indexOf(text);
						int posTextEncrypt = (posText * keyNum1) % 26;
//                        int posTextEncrypt = (posText * keyNum1 + -1 * keyNum2) % 26;
						result += Model.TEST.get(posTextEncrypt);
					} else {
						char text1 = inputToArray[i];
						char text2 = inputToArray[i + 1];
						int posText1 = Model.TEST.indexOf(text1);
						int posText2 = Model.TEST.indexOf(text2);
						int posTextEncrypt = (posText1 * keyNum1 + posText2 * keyNum2) % 26;
						result += Model.TEST.get(posTextEncrypt);
					}
				} else {
					String keyString = key.split(" \\| ")[1];
					int keyNum1 = Integer.parseInt(keyString.split(" ")[0]);
					int keyNum2 = Integer.parseInt((keyString.split(" ")[1]));
					char text1 = inputToArray[i];
					char text2 = inputToArray[i - 1];
					int posText1 = Model.TEST.indexOf(text1);
					int posText2 = Model.TEST.indexOf(text2);
					int posTextEncrypt = (posText2 * keyNum1 + posText1 * keyNum2) % 26;
					result += Model.TEST.get(posTextEncrypt);
				}
			} else {
				String keyString = key.split(" \\| ")[0];
				int keyNum1 = Integer.parseInt(keyString.split(" ")[0]);
				int keyNum2 = Integer.parseInt(keyString.split(" ")[1]);
				char text1 = inputToArray[i];
				char text2 = inputToArray[i + 1];
				int posText1 = Model.TEST.indexOf(text1);
				int posText2 = Model.TEST.indexOf(text2);
				int posTextEncrypt = (posText1 * keyNum1 + posText2 * keyNum2) % 26;
				result += Model.TEST.get(posTextEncrypt);
			}
		}
		return result;
	}

	public static int detNghichDao(String matrix) {
		int result = 0;
		int num1 = Integer.parseInt(matrix.split(" \\| ")[0].split(" ")[0]);
		int num2 = Integer.parseInt(matrix.split(" \\| ")[0].split(" ")[1]);
		int num3 = Integer.parseInt(matrix.split(" \\| ")[1].split(" ")[0]);
		int num4 = Integer.parseInt(matrix.split(" \\| ")[1].split(" ")[1]);
		int detK = (num1 * num4 - num2 * num3) % 26;
		for (int i = 0; i < 26; i++) {
			if (i * detK % 26 == 1) {
				return i;
			}
		}
		return result;
	}

	public static String kNghichDao(String matrix) {
		int detNghichDao = detNghichDao(matrix);
		int num1 = Integer.parseInt(matrix.split(" \\| ")[0].split(" ")[0]);
		int num2 = Integer.parseInt(matrix.split(" \\| ")[0].split(" ")[1]);
		int num3 = Integer.parseInt(matrix.split(" \\| ")[1].split(" ")[0]);
		int num4 = Integer.parseInt(matrix.split(" \\| ")[1].split(" ")[1]);
		String result = "";
		result += num4 * detNghichDao % 26 + " ";
		result += (26 - num2) * detNghichDao % 26 + " | ";
		result += (26 - num3) * detNghichDao % 26 + " ";
		result += num1 * detNghichDao % 26;
		return result;
	}

	public static void main(String[] args) {
		System.out.println(createKeyRandom());
		System.out.println(encrypt("LE QUOC THIN", "11 3 | 8 7"));
		System.out.println(detNghichDao("3 2 | 3 5"));
		System.out.println(kNghichDao("3 2 | 3 5"));
		System.out.println(encrypt("DMLACYTJWTXZ", kNghichDao("11 3 | 8 7")));
		System.out.println(encrypt("DPLE", "15 20 | 17 9"));
	}
}
