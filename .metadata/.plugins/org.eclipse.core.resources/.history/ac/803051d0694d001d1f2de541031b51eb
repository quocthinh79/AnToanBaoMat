package model;

import java.text.ParsePosition;
import java.util.Iterator;
import java.util.concurrent.ThreadLocalRandom;

public class HillEncoding {
	public static int num1;
	public static int num2;
	public static int num3;
	public static int num4;

	public HillEncoding(String matrix) {
		// TODO Auto-generated constructor stub
		num1 = Integer.parseInt(matrix.split(" \\| ")[0].split(" ")[0]);
		num2 = Integer.parseInt(matrix.split(" \\| ")[0].split(" ")[1]);
		num3 = Integer.parseInt(matrix.split(" \\| ")[1].split(" ")[0]);
		num4 = Integer.parseInt(matrix.split(" \\| ")[1].split(" ")[1]);
	}

	public static String createKeyRandom() {
		String result = "";
		for (int i = 0; i < 4; i++) {
			int numRandom = ThreadLocalRandom.current().nextInt(1, 30);
			if (i == 4 / 2) {
				result += "| " + numRandom + " ";
			} else {
				result += numRandom + " ";
			}
		}
		return result;
	}

	public static String encrypt(String input) {
		String handledInput = Model.removeAccented(input);
		String result = "";
		char[] array = handledInput.toCharArray();
		char[] inputToArray;
		if (array.length % 2 != 0) {
			inputToArray = new char[array.length + 1];
			for (int i = 0; i < inputToArray.length; i++) {
				if (i < inputToArray.length - 1) {
					inputToArray[i] = array[i];
				} else {
					inputToArray[i] = ' ';
				}
			}
		} else {
			inputToArray = new char[array.length];
			inputToArray = array;
		}
		for (int i = 0; i < inputToArray.length; i++) {
			if (i != 0) {
				if (i % 2 == 0) {
//					String keyString = key.split(" \\| ")[0];
//					int keyNum1 = Integer.parseInt(keyString.split(" ")[0]);
//					int keyNum2 = Integer.parseInt((keyString.split(" ")[1]));
					char text1 = inputToArray[i];
					char text2 = inputToArray[i + 1];
					int posText1 = Model.generalAlphabetListWithSpace.indexOf(text1);
					int posText2 = Model.generalAlphabetListWithSpace.indexOf(text2);
					int posTextEncrypt = (posText1 * num1 + posText2 * num2) % 59;
					result += Model.generalAlphabetListWithSpace.get(posTextEncrypt);
				} else {
//					String keyString = key.split(" \\| ")[1];
//					int keyNum1 = Integer.parseInt(keyString.split(" ")[0]);
//					int keyNum2 = Integer.parseInt((keyString.split(" ")[1]));
					char text1 = inputToArray[i];
					char text2 = inputToArray[i - 1];
					int posText1 = Model.generalAlphabetListWithSpace.indexOf(text1);
					int posText2 = Model.generalAlphabetListWithSpace.indexOf(text2);
					int posTextEncrypt = (posText2 * num3 + posText1 * num4) % 59;
					result += Model.generalAlphabetListWithSpace.get(posTextEncrypt);
				}
			} else {
//				String keyString = key.split(" \\| ")[0];
//				int keyNum1 = Integer.parseInt(keyString.split(" ")[0]);
//				int keyNum2 = Integer.parseInt(keyString.split(" ")[1]);
				char text1 = inputToArray[i];
				char text2 = inputToArray[i + 1];
				int posText1 = Model.generalAlphabetListWithSpace.indexOf(text1);
				int posText2 = Model.generalAlphabetListWithSpace.indexOf(text2);
				int posTextEncrypt = (posText1 * num1 + posText2 * num2) % 59;
				result += Model.generalAlphabetListWithSpace.get(posTextEncrypt);
			}
		}
		return result;
	}

	public static int detNghichDao(String matrix) {
		int result = 0;
//		int num1 = Integer.parseInt(matrix.split(" \\| ")[0].split(" ")[0]);
//		int num2 = Integer.parseInt(matrix.split(" \\| ")[0].split(" ")[1]);
//		int num3 = Integer.parseInt(matrix.split(" \\| ")[1].split(" ")[0]);
//		int num4 = Integer.parseInt(matrix.split(" \\| ")[1].split(" ")[1]);
		int detK = (num1 * num4 - num2 * num3) % 59;
		for (int i = 0; i < 59; i++) {
			if (i * detK % 59 == 1) {
				return i;
			}
		}
		return result;
	}

	public static String kNghichDao(String matrix) {
		int detNghichDao = detNghichDao(matrix);
//		int num1 = Integer.parseInt(matrix.split(" \\| ")[0].split(" ")[0]);
//		int num2 = Integer.parseInt(matrix.split(" \\| ")[0].split(" ")[1]);
//		int num3 = Integer.parseInt(matrix.split(" \\| ")[1].split(" ")[0]);
//		int num4 = Integer.parseInt(matrix.split(" \\| ")[1].split(" ")[1]);
		String result = "";
		result += num4 * detNghichDao % 59 + " ";
		result += (59 - num2) * detNghichDao % 59 + " | ";
		result += (59 - num3) * detNghichDao % 59 + " ";
		result += num1 * detNghichDao % 59;
		return result;
	}

	public static void main(String[] args) {
		HillEncoding hill = new HillEncoding("11 3 | 8 7");
		System.out.println(createKeyRandom());
		System.out.println(encrypt("Lê Quốc Thịnh"));
//		System.out.println(encrypt("Lê Quốc Thịnh", "11 3 | 8 7"));
		System.out.println(detNghichDao("3 2 | 3 5"));
		System.out.println(kNghichDao("3 2 | 3 5"));
		System.out.println(encrypt("mGơIqoKưkmPoPm", kNghichDao("11 3 | 8 7")));
		System.out.println(encrypt("DPLE", "15 20 | 17 9"));
	}
}
